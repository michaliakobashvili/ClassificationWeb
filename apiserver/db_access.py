import random
import re
from datetime import datetime, timedelta
from secrets import token_urlsafe

from sqlalchemy import Engine, update, func
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from sqlalchemy.orm import declarative_base

from credentials import *
from models import Passcode, Tweet, Classification, Tweeter

Base = declarative_base()


class Singleton(type):
    def __init__(cls, name, bases, dict):
        super().__init__(name, bases, dict)
        cls.instance = None

    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super().__call__(*args, **kw)
        return cls.instance


class DBAccess(metaclass=Singleton):
    def __init__(self):
        self.engine: Engine = create_engine(DB)

    def create_passcode(self, email, duration):
        with Session(self.engine) as session:
            passcode = generate_passcode(duration)
            session.add(
                Passcode(key=passcode.key, valid_until=passcode.valid_until, created=passcode.created, email=email))
            session.commit()
        return passcode.key

    def get_passcode(self, key):
        with Session(self.engine) as session:
            result = session.query(Passcode).filter(Passcode.key == key)
            return result.one_or_none()

    def activate_passcode_by_email(self, email):
        with Session(self.engine) as session:
            session.execute(update(Passcode).where(Passcode.email == email).values(activated=True))
            session.commit()

    def get_tweet(self, tweet_id):
        with Session(self.engine) as session:
            return session.query(Tweet).filter(Tweet.id == tweet_id).one_or_none()

    def insert_tweet(self, tweet_id, tweeter, content):
        with Session(self.engine) as session:
            content = preprocess_tweet(content)
            if not content:
                return
            session.add(Tweet(id=tweet_id, tweeter=tweeter, content=content))
            session.commit()

    def insert_tweeter(self, username):
        with Session(self.engine) as session:
            session.add(Tweeter(username=username))
            session.commit()

    def get_tweeter(self, username):
        with Session(self.engine) as session:
            return session.query(Tweeter).filter(Tweeter.username == username).one_or_none()

    def __reserve_tweet(self, tweet, passcode):
        with Session(self.engine) as s:
            if s.query(Classification).filter(Classification.tweet == tweet.id).filter(
                    Classification.classifier == passcode).first():
                return
            classification = Classification(tweet=tweet.id,
                                            classifier=passcode,
                                            classification="N/A",
                                            classified_at=datetime.now())
            s.add(classification)
            s.commit()

    def get_unclassified_tweet(self, passcode):
        with Session(self.engine) as session:
            # Look for tweet in middle of classification (N/A classification)
            result = session.query(Tweet).filter(Tweet.id == Classification.tweet).filter(
                Classification.classifier == passcode).filter(
                Classification.classification == "N/A").first()
            if result:
                return result

            if self.get_passcode(passcode).professional:
                to_be_classified = session.query(Tweet).filter(Tweet.id.in_(pro_bank)).filter(
                    ~Tweet.id.in_(
                        session.query(Classification.tweet).filter(Classification.classifier == passcode))).all()

                if to_be_classified:
                    tweet = random.choice(to_be_classified)
                    self.__reserve_tweet(tweet, passcode)
                    return tweet

                else:
                    return None

            # Get list of tweets that were classified exactly once by any classifier except this one that are not N/A
            classified_once = session.query(Tweet)\
                .filter(Tweet.id == Classification.tweet)\
                .filter(Classification.classification != "N/A")\
                .group_by(Tweet.id)\
                .having(func.count(Classification.tweet) == 1)\
                .filter(Classification.classifier != passcode)\

            # Return a random tweet that has no classifications
            never_classified = session.query(Tweet).filter(~Tweet.id.in_(session.query(Classification.tweet))).all()

            if classified_once and never_classified:
                if random.random() < 0.5:
                    result = classified_once
                else:
                    result = never_classified
            else:
                result = classified_once or never_classified

            ids = [tweet.id for tweet in result]
            if ids:
                random_id = random.choice(ids)
                tweet = next(tweet for tweet in result if tweet.id == random_id)

                if tweet:
                    self.__reserve_tweet(tweet, passcode)

                    return tweet

    def classify_tweet(self, tweet_id, classifier, classification, features):
        with Session(self.engine) as session:
            # look for an N/A classification for this tweet and classifier
            result = session.query(Classification).filter(Classification.tweet == tweet_id).filter(
                Classification.classifier == classifier).filter(
                Classification.classification == "N/A").one_or_none()
            if not result:
                return False

            session.execute(update(Classification).where(Classification.tweet == tweet_id).where(
                Classification.classifier == classifier).values(classification=classification, features=features,
                                                                classified_at=datetime.now()))
            session.commit()
            return True

    def get_passcode_by_email(self, email):
        with Session(self.engine) as session:
            return session.query(Passcode).filter(Passcode.email == email).one_or_none()

    def get_num_classifications(self, classifier):
        with Session(self.engine) as session:
            return session.query(Classification).filter(Classification.classifier == classifier).filter(
                Classification.classification != "N/A").filter(
                Classification.classified_at > datetime(2023, 6, 14)).count()

    def preprocess_all_tweets(self):
        with Session(self.engine) as session:
            tweets = session.query(Tweet).all()
            for tweet in tweets:
                tweet.content = preprocess_tweet(tweet.content)
                if tweet.content == "":
                    session.delete(tweet)
            session.commit()

    def count_tweets_by_tweeter(self, tweeter):
        with Session(self.engine) as session:
            return session.query(Tweet).filter(Tweet.tweeter == tweeter).count()

    def count_irrelevant_tweets_by_tweeter(self, tweeter):
        with Session(self.engine) as session:
            return session.query(Classification).filter(Classification.tweet == Tweet.id).filter(
                Tweet.tweeter == tweeter).filter(Classification.classification == "Irrelevant").count()


def preprocess_tweet(text: str) -> str:
    # Remove URLs
    text = re.sub(r"http\S+", "", text)

    # Remove mentions
    text = re.sub(r"@\S+", "", text)

    # Remove # from hashtags
    text = re.sub(r"#", "", text)

    # Remove emojis
    text = re.sub(r"[^\w\s]", "", text)

    # Only keep English letters, no numbers
    text = re.sub(r"[^a-zA-Z\s]", "", text)

    # Remove extra spaces
    text = re.sub(r"\s+", " ", text)

    # Remove leading and trailing spaces
    text = text.strip()

    if len(text.split()) < 6:
        return ""

    return text


def generate_passcode(duration=timedelta(days=7)):
    key = token_urlsafe(6)
    token = Passcode(key=key, valid_until=datetime.now() + duration, created=datetime.now())
    return token


pro_bank = ['1242533215895801856', '1251331453541068800', '1273355545785876480', '1278677445873459202',
            '1306986250298175494', '1321834016216129540', '1326951068929056768', '1331014582605930497',
            '1351704120105832449', '1352192223585198085', '1352192225313222656', '1352201368820453378',
            '1352203517583364096', '1354785862719049729', '1360337174378516480', '1361619615609151489',
            '1362134933205118983', '1363571617192902663', '1368642196522602502', '1379480594518794241',
            '1387261078808190976', '1387271290474663937', '1387341405312278528', '1388511358774304768',
            '1397839086820499456', '1398589611824365570', '1398597840046366722', '1408964185405505538',
            '1414997408057016337', '1415743615889022977', '1432465300621041672', '1438450219285454858',
            '1455707723564212228', '1470177663272865794', '1470811414227005440', '1471186784478547976',
            '1471837160420614149', '1476114884584747013', '1478529891603824641', '1479588677776859138',
            '1480569760861536258', '1480910498879229957', '1488952290857861122', '1497260460290232330',
            '1497998022046855169', '1503814375420932096', '1507674545867694081', '1513769891853217801',
            '1514136175770013698', '1514142714081816579', '1514157880009764871', '1519645716532105216',
            '1520201071406333953', '1526597598827757569', '1531990208794738690', '1533904321640792065',
            '1535186420066836482', '1535975755640889344', '1537075915322163205', '1539713564952465408',
            '1540474602232709120', '1547166186877718529', '1547312407344709634', '1547517411758317569',
            '1547566158957514755', '1547581612962902020', '1547890538430337024', '1555447870584651777',
            '1560332273525874689', '1563445450656518145', '1565755022863908869', '1567248597988564998',
            '1569274043617918979', '1569763765825970179', '1571588707974610947', '1572163672910200833',
            '1575384202824105984', '1575431292170035200', '1575819616407867392', '1576322236696252416',
            '1576376346573701121', '1576828061991194624', '1576856068176891904', '1577703316787789825',
            '1578822054614544384', '1579527021193224193', '1581417579859808256', '1582391088064581633',
            '1583504918928760835', '1587478545365962755', '1587774545276051458', '1588110835821559814',
            '1588218789124050945', '1589727152173633538', '1590001913176952832', '1590007274592145411',
            '1590008037380870144', '1591033015177981952', '1591885715918704640', '1592243632085823488',
            '1593884458612031489', '1594343577756528640', '1594791654904438789', '1594990542970314754',
            '1596177511196823552', '1596671088863354881', '1596852850541199360', '1598410905863487488',
            '1598434029593829396', '1599007717552967680', '1599214622170832896', '1599830714005917697',
            '1599852015609577474', '1600095430024445952', '1601297649394913280', '1601332388549652482',
            '1602015609524453377', '1604128808524664838', '1604513434091098113', '1604532505398239232',
            '1605150457999007744', '1606657114721615872', '1608840796786294784', '1609571650353369089',
            '1611096719382511618', '1612460882998726656', '1613278794013462539', '1614254817777709056',
            '1616752785537568770', '1618184510843260931', '1618543493194067968', '1618610641023139841',
            '1620001825205399553', '1620197533812408321', '1620626581659205632', '1621197981788553217',
            '1621197985999642624', '1621197994157539333', '1621236481544097792', '1621261481131098117',
            '1621422732599500800', '1621795139361583105', '1621953810116534272', '1623132667897159681',
            '1623326906417283072', '1624008064171970561', '1624058783486951428', '1624131275677175808',
            '1624363608154013696', '1624363612855758849', '1624363627074449408', '1624524612204724226',
            '1624769674780065793', '1624906369219403776', '1625051141842034688', '1625984065596755969',
            '1626163222238707712', '1626248174305263618', '1626316431917780996', '1626874762709422080',
            '1626982587041214467', '1627243984215998466', '1627988923690455040', '1628854397622013952',
            '1630162373091762177', '1630266492599119879', '1631242869280325635', '1631327076299988992',
            '1631399520524283904', '1631413138728837125', '1631559139867467778', '1631621657600065537',
            '1631708005409357840', '1631747918657978371', '1631944564192731138', '1632057643287150593',
            '1632456833695719426', '1632746509086216197', '1633180680057241603', '1633188838636937216',
            '1633492511292366848', '1633930553723428864', '1633944456226275328', '1633945783727800320',
            '1633945785837445120', '1634339915260387328', '1634665156935294978', '1634665849343684611',
            '1634702157499846656', '1634908335198830593', '1635132525755650049', '1635163634585452544',
            '1635571063919616001', '1635712717217464345', '1636328428839354368', '1636702007959474178',
            '1636741825254891524', '1636840064893308928', '1637119050546307073', '1637616795874934787',
            '1638134049230209029', '1638407483176767489', '1638681586907459584', '1638908073279381505',
            '1638921734966464514', '1638962418142310414', '1638990254311964673', '1639212471813832706',
            '1639226045604790272', '1639349751018602497', '1639459288203636737', '1639721466815033348',
            '1640079198323703808', '1640333199149608960', '1640651185706221570', '1640654687098527744',
            '1640804875960307712', '1640874468586209280', '1640892749758058497', '1641046332470095872',
            '1641096361247473664', '1641135233343913986', '1641168467419185159', '1641399099172741120',
            '1641435200214437889', '1641449780814704645', '1641497917633490945', '1641500062139203584',
            '1641529775205261312', '1641846062041137154', '1641851886587215886', '1642144083807199237',
            '1642507687173734400', '1642589258820075521', '1642617773191749639', '1642777655748485120',
            '1642982132371922950', '1643022682416398337', '1643084676519669760', '1643112024149303296',
            '1643238604322250753', '1643360856305205248', '1643432774626422785', '1643456080301703172',
            '1643566510353293312', '1643614410785665030', '1643650411151204352', '1643655314724487176',
            '1643802489219588097', '1643887905302102016', '1643935270650126337', '1643983455133499395',
            '1643989936272732160', '1644030087761633283', '1644074451896598528', '1644297389052665857',
            '1644299586079473664', '1644318374812348419', '1644396683923529734', '1644540004566278146',
            '1644702170275618818', '1644762533004230659', '1644766113434152964', '1644806404740374528',
            '1645081984652255235', '1645112037884801026', '1645329375292694529', '1645442306990899202',
            '1645492822395736066', '1645832532233953280', '1645933095995215872', '1645945474145214465',
            '1646068684396322816', '1646194428577562632', '1646210063210627072', '1646300929673535488',
            '1646440719282847744', '1646527031059054597', '1646549748743061504', '1646559513502154752',
            '1646578264058613760', '1646610765342703616', '1646615546555711492', '1646622487260561409',
            '1646658440771559426', '1646831668517371904', '1646942337833005057', '1646946320924418065',
            '1647000488746024961', '1647048492844560391', '1647233290267418624', '1647236439912923137',
            '1647271048335745024', '1647305510775844866', '1647332733528465408', '1647345246668201985',
            '1647607081858482177', '1647675251952701441', '1647820526956445696', '1647911831556575232',
            '1647974329815105543', '1647980437837365250', '1648012829696335885', '1648074820884606979',
            '1648105167152095236', '1648108206839808001', '1648269139096600577', '1648291601049960450',
            '1648293328062955521', '1648315396183736321', '1648359392713031684', '1648372311593041950',
            '1648421773912989698', '1648666145010995202', '1648685391795331073', '1648739141541036045',
            '1648765322629898266', '1648768524788064265', '1648813777289113601', '1648821247156060161',
            '1648982242159476736', '1648995772438831104', '1649074016143982592', '1649088374223912965',
            '1649088641816498176', '1649104657766047744', '1649306097281560577', '1649342552456196096',
            '1649444643065454592', '1649521872655007745', '1649719660789596165', '1649747483138859008',
            '1649762768470384640', '1649763534111113216', '1649777968569372672', '1649793665433231360',
            '1649795654250557441', '1649838022228164608', '1649852353971908616', '1649867734614781953',
            '1650109881582510081', '1650208959595417601', '1650211264600129536', '1650488650424041473',
            '1650517427510292481', '1650627782123175936', '1650726487543119875', '1650791829405679617',
            '1650791831259471872', '1650973313995354112', '1651102212804706304', '1651142551817076741',
            '1651150941532352514', '1651259766491021312', '1651297830479200256', '1651302033301831708',
            '1651311763206332417', '1651343133651738626', '1651457845391400961', '1651483492331450368',
            '1651542287392833547', '1651563568452579333', '1651592594139250688', '1651630375792254976',
            '1651652681788735488', '1651672690506231821', '1651897371582660608', '1652007262137843713',
            '1652009911801266180', '1652030850953781254', '1652040744457084932', '1652044422274490398',
            '1652213758301818883', '1652248972528963584', '1652250282242310144', '1652256447432994816',
            '1652276500450754562', '1652315701527412736', '1652408896491859968', '1652411118042636291',
            '1652631523399553025', '1652694600262512645', '1652712491145723905', '1652726611400114177',
            '1652776679700406273', '1652980900081065986', '1653008828374429696', '1653031232341438464',
            '1653064612475031552', '1653116911159222286', '1653164462268973056', '1653171610956734469',
            '1653179268120158209', '1653309781887598604', '1653346087514644480', '1653361800338112512',
            '1653381809957208065', '1653459717400801280', '1653485203900252161', '1653536915809771521',
            '1653687170417213441', '1653757633021583360', '1653759870837878786', '1653817348833288192',
            '1653829400247279619', '1653836699519033358', '1653845363600572419', '1653986174958985217',
            '1654012455029202945', '1654015772761509889', '1654082779263508480', '1654091224859516930',
            '1654144364635992065', '1654159964884066305', '1654190316260413443', '1654196795180830724',
            '1654241791988695041', '1654292200237195264', '1654405393324335104', '1654429798079377410',
            '1654474680479150080', '1654500763257692160', '1654514101547139072', '1654521167854673920',
            '1654563529452576771', '1654588907843928064', '1654753912522457088', '1654780799093178368',
            '1654792327989194752', '1654812998198870016', '1654817131458883584', '1654820249257009157',
            '1654820478211457025', '1654822889567166464', '1654872260962910210', '1654914439156584448',
            '1654951994317066242', '1654960337307803651', '1654994080462405634', '1655133621022326786',
            '1655169405616046082', '1655170495808143363', '1655173276702834695', '1655184784245633024',
            '1655195284018720770', '1655306001627729922', '1655363786012753921', '1655463139310272512',
            '1655500500287062024', '1655530966935392267', '1655557260767109121', '1655567833210793985',
            '1655591888018194432', '1655653982994309135', '1655657982305136640', '1655764755175415808',
            '1655765216439697409', '1655774790416838661', '1655839766829494272', '1655841271523557378',
            '1655843900039233536', '1655869590172323843', '1655905463224119297', '1655943348295995393',
            '1655952404507156483', '1655969175733411841', '1655997856321347607', '1656017944881577985',
            '1656017953874223161', '1656017963537903616', '1656017978066968581', '1656083600381706240',
            '1656109768266641409', '1656156091057680385', '1656216511973937152', '1656233868515774465',
            '1656247352183726082', '1656255419575140352', '1656259717478649856', '1656271237008568320',
            '1656302033224212480', '1656400694688075778', '1656457883226193928', '1656576545069178881',
            '1656628719178350593', '1656641554948448258', '1656655984390184960', '1656680803038900227',
            '1656688589323763715', '1656699257980612609', '1656744694603214857', '1656749111301795848',
            '1656868688908132354', '1656870384522911744', '1656906303963275265', '1656963037385961474',
            '1656971116500451330', '1656997802147299331', '1657005115633541121', '1657015988812931082',
            '1657058599422636032', '1657058607471493121', '1657082870513426441', '1657083124088557568',
            '1657101920895488010', '1657320570545926146', '1657338506509680641', '1657380063325614080',
            '1657380215189028864', '1657416175238762497', '1657416183820296193', '1657444579229016065',
            '1657456284772323328', '1657470559033208832', '1657512049008689153', '1657656999155322886',
            '1657703050721591297', '1657728118121979909', '1657750176977633280', '1657796662507581442',
            '1657815032833486850', '1657825249398775808', '1657927025888309250', '1658011914570543105',
            '1658022491661508608', '1658037369293926401', '1658038640688111617', '1658042884849844228',
            '1658048284814917634', '1658063949881827330', '1658067790517923840', '1658071082404855809',
            '1658071490309365761', '1658072426675154944', '1658075052443664384', '1658091022247776256',
            '1658101946199179266', '1658107325280837639', '1658131222093086725', '1658173795960512529',
            '1658461978808004610', '1658462843166146561', '1658498743157641217', '1658507979019173889',
            '1658512613691596800', '1658552908894355459', '1658577200151420928', '1658582910515961856',
            '1658661700898267136', '1658764064040837121', '1658765398001561600', '1658797153509097475',
            '1658798688192307201', '1658800211974664194', '1658803047345053697', '1658810382914396161',
            '1658816802711846912', '1658895588358856718', '1658902504103346177', '1658902788703756301',
            '1658903113749733397', '1658911555340181533', '1658911562566967319', '1658911564274049033',
            '1658911566052433927', '1658911571957956609', '1658917854614368256', '1658953122105163777',
            '1659084239709650945', '1659115378478383106', '1659116988491243521', '1659163071246479368',
            '1659173565348945923', '1659183111907823620', '1659200094674251781', '1659214531040772096',
            '1659219092790734851', '1659226551383146497', '1659264991726272514', '1659281016538689542',
            '1659289655722799119', '1659298999822610433', '1659330877841604610', '1659362307640803330',
            '1659401552568655877', '1659501447367516160', '1659516551035252739', '1659521950958403584',
            '1659542939402489863', '1659553406392958977', '1659591434050174978', '1659607327392120839',
            '1659624285940375559', '1659626768527966224', '1659628559617470464', '1659653992257822798',
            '1659662781614895106', '1659665665941291016', '1659683954604007425', '1659686828637601793',
            '1659727662451945472', '1659730942288642049', '1659764301228285953', '1659825883744534528',
            '1659831168420782080', '1659845633061142529', '1659919987706822656', '1659922854488465410',
            '1659928876636569601', '1659966188451971073', '1659989749141045249', '1660002380543406080',
            '1660015847723655169', '1660054436369031169', '1660058518466994176', '1660059830525087746',
            '1660060239025123329', '1660090950381711360', '1660185308435038208', '1660189636721868802',
            '1660198513765122053', '1660244116851118081', '1660247567492366336', '1660248740098179072',
            '1660266234200432644', '1660266486055706624', '1660278369559236609', '1660292280585007104',
            '1660358836962689029', '1660370320698626048', '1660375473220640774', '1660482122782502912',
            '1660491978285490178', '1660560771665764354', '1660580037853077504', '1660582080944693251',
            '1660675455014387715', '1660691481827373057', '1660709962711007240', '1660720550518333457',
            '1660784173240532992', '1660866347000119297', '1660912622793809920', '1660959859695550465',
            '1660985224140824576', '1660988392589475840', '1661007915095052290', '1661015679720640515',
            '1661022089917394944', '1661047201278185472', '1661061542899765248', '1661067737664307234',
            '1661069973463154705', '1661077495888658446', '1661080136454733824', '1661090077441703959',
            '1661102221696671745', '1661105872452329487', '1661105878127222791', '1661207349195882498',
            '1661278561322270721', '1661310969794928641', '1661321783524335617', '1661323290072293377',
            '1661327963772661760', '1661333964177514496', '1661334264246423553', '1661338048922001408',
            '1661355971434754056', '1661371708589109249', '1661378953746038786', '1661389636512407560',
            '1661398352985042945', '1661415547974631424', '1661420487988084748', '1661438680442044430',
            '1661635793557889025', '1661663287388299265', '1661694276353261568', '1661752296299012097',
            '1661870176831254529', '1662948332275105792', '1663363263990493186', '1663848168969183233',
            '1663870310066561025', '1664277737773887492', '1664366940293308417', '1664601676991328257',
            '1664931849196453888', '1665003977841180673', '1665337576570474499', '1665680637116678146',
            '1665733859286065153', '1665753961813385220', '1665760418235547657', '1665977092767457284',
            '1665998199700480000', '1666036964724813826', '1666130789367525404', '1666162727067308041',
            '602395685409955840', '602395776589901824', '603518187506917376', '604306946154459137',
            '605052611428007937', '605136039032827904']

